# Copyright (c) 2008 John E. Collins
# May be reused with attribution
# Modified (c) 2010 Maya Pevzner

CPP = g++
CXX_DIR = ../cxxtest
LOG_DIR = ../apache-log4cxx-0.10.0
CXX = $(CXX_DIR)/cxxtestgen.pl
CPPFLAGS = -fprofile-arcs -ftest-coverage -g
LFLAGS = $(CPPFLAGS) -llog4cxx -lapr-1 -laprutil-1

.SUFFIXES : .o .cpp .c
.cpp.o :
	$(CPP) $(CPPFLAGS) -c -ggdb3 $<

TESTS = ModelTest.h ConfigFileTest.h HouseTest.h SchedulerTest.h RandomIntTest.h ClockTest.h RefrigeratorTest.h WaterHeaterTest.h ToasterTest.h OvenTest.h MicrowaveTest.h DishwasherTest.h TelevisionTest.h StoveTest.h HairDryerTest.h XboxTest.h PersonSMTest.h
SOURCES = Model.cpp House.cpp Scheduler.cpp RandomInt.cpp Refrigerator.cpp WaterHeater.cpp Toaster.cpp Oven.cpp Microwave.cpp Dishwasher.cpp Television.cpp Stove.cpp HairDryer.cpp Xbox.cpp ConfigFile.cpp Clock.cpp PersonSM.cpp Stringutil.cpp
OBJS = Model.o House.o Scheduler.o RandomInt.o Refrigerator.o WaterHeater.o Toaster.o Oven.o Microwave.o Dishwasher.o Television.o Stove.o HairDryer.o Xbox.o ConfigFile.o Clock.o PersonSM.o Stringutil.o

# Build object files
Model.o: Model.cpp Model.h
Refrigerator.o: Refrigerator.cpp Refrigerator.h
Scheduler.o: Scheduler.cpp Scheduler.h
WaterHeater.o: WaterHeater.cpp WaterHeater.h
Toaster.o : Toaster.cpp Toaster.h
Oven.o: Oven.cpp Oven.h
Microwave.o: Microwave.cpp Microwave.h
Dishwasher.o: Dishwasher.cpp Dishwasher.h
Television.o: Television.cpp Television.h
Stove.o: Stove.cpp Stove.h
HairDryer.o: HairDryer.cpp HairDryer.h
Xbox.o: Xbox.cpp Xbox.h
PersonSM.o: PersonSM.cpp PersonSM.h
RandomInt.o: RandomInt.cpp RandomInt.h
House.o: House.cpp House.h
Clock.o: Clock.cpp Clock.h
ConfigFile.o: ConfigFile.cpp ConfigFile.h
Stringutil.o: Stringutil.cpp Stringutil.h
simulator.o: simulator.cpp

# all: (default target) builds the executable, runs the tests, and generates the documentation.
all: doc run-tests test-coverage simulator clean

# simulator: builds executable program.
simulator: simulator.o $(OBJS)
#	$(CPP) $(LFLAGS) -o $@ $^
	$(CPP) $(LFLAGS) -o simulator simulator.o $(OBJS)
	
# run-tests: builds (if necessary) and runs the unit tests.
run-tests: runner
	./runner

# test-coverage: builds (if necessary) and runs your unit tests, and reports test coverage.
test-coverage: run-tests
	gcov -b $(SOURCES) | grep "^File '[^/].*.cpp" --after-context 1 --color=NEVER >testcoverage.txt

# runner.cpp: generates test runner
runner.cpp: $(TESTS)
	$(CXX) --include=LoggerSetup.h --error-printer -o runner.cpp $(TESTS)

# runner: builds test runner
runner: runner.cpp $(OBJS)
	$(CPP) -I$(CXX_DIR) $(LFLAGS) -o runner runner.cpp $(OBJS)

# doc: runs doxygen to generate html-format documentation in a subdirectory called "html".
doc: Doxyfile $(OBJS)
	doxygen

# clean: removes all files generated by other targets.
clean:
#	rm -f *.gcov *.gcda *.gcno *.log *.o runner* simulator testcoverage.txt
	rm -f *.gcov *.gcda *.gcno *.o runner*
	rm -f -r html
	rm -f -r latex
